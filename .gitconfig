[alias]
	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD
	arcpatch = !arc patch $1 && git rebase master && git checkout master && git merge arcpatch-$1 && :

	br = branch

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	co = checkout
  ci = commit

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Show the diff between the latest commit and the current state
	d = "!git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = "!d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = !git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	glog = log --graph --decorate --all --pretty=fuller

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# View the current working tree status using the short format
	s = status -s
	st = status
	slist = stash list --format='%gd %ad %gs'

	# Pull in remote changes for the current repository and all its submodules
	p = "!git pull; git submodule foreach git pull origin master"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v



[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	attributesfile = /Users/mtsai/dotfiles/.gitattributes
	excludesfile = /Users/mtsai/dotfiles/.gitignore_global

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	autocrlf = input
	eol = lf
	filemode = false
	pager = less -x3,2
	editor = micro

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]

	# Detect copies as well as renames
	renames = copies

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]

	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = matching

# URL shorthands

[url "git@github.com:"]

	insteadOf = gh:
	pushInsteadOf = github:
	pushInsteadOf = git://github.com/

[url "git://github.com/"]

	insteadOf = github:

[url "git@gist.github.com:"]

	insteadOf = gst:
	pushInsteadOf = gist:
	pushInsteadOf = git://gist.github.com/

[url "git://gist.github.com/"]

	insteadOf = gist:


[filter "tabspace"]

[diff]
  tool = kdiff3
[difftool "kdiff3"]
  path = /usr/local/bin/kdiff3
[difftool]
  prompt = false
	keepBackup = false
	trustExitCode = false
[merge]
  tool = kdiff3
[mergetool]
  prompt = false
  keepBackup = false
  keepTemporaries = false
[mergetool "kdiff3"]
  path = /usr/local/bin/kdiff3

#[difftool "sourcetree"]
#	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
#	path =

#[mergetool "sourcetree"]
#	cmd = /Applications/_dev/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
#	trustExitCode = true


[user]
	name = Ming Tsai
	email = mingster.tsai@gmail.com
[commit]
	template = /Users/mtsai/.stCommitMsg
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
[filesystem "Oracle Corporation|1.8.0_181|/dev/disk5s1"]
	timestampResolution = 1001 milliseconds
	minRacyThreshold = 0 nanoseconds
[filesystem "Oracle Corporation|1.8.0_181|/dev/disk1s5"]
	timestampResolution = 1001 milliseconds
	minRacyThreshold = 0 nanoseconds
[pull]
	rebase = true
[http]
	postBuffer = 524288000
[difftool "sourcetree"]
	cmd = /Applications/kdiff3.app/Contents/MacOS/kdiff3 \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/kdiff3.app/Contents/MacOS/kdiff3 \"$BASE\" \"$LOCAL\" \"$REMOTE\" -o \"$MERGED\"
	trustExitCode = true
